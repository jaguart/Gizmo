#!/usr/bin/env raku
use v6;

use Kaolin::File :find, :mv-file;

my %*SUB-MAIN-OPTS =
  :named-anywhere,    # named options anywhere
;

#-------------------------------------------------------------------------------
#| fix-filenames - lowercase, only alphanumeric, hypen and dot allowed.
#| -/L to retain case, -R to recurse. Options are uppercase.
multi sub MAIN (
    Str $dir = '.',
    Bool :$rename       = False,    #= perform the rename
    Bool :R($recursive) = False,    #= recurse into subfolders
    Bool :L($lc)        = True,     #= force to lowercase
) {

    my %count;

    for find(
        $dir,
        :$recursive,
        :type<file>,
        :skip(rx/ '.precomp/' || '.git/' || '.idea/' /)
    ) -> $file {

        %count<checked>++;

        my $basename    = $file.basename;
        my $extension   = $file.extension;
        $basename       = $basename.chop($extension.chars+1);

        if $lc {
            $basename   = $basename.lc;
            $extension  = $extension.lc;
        }

        # any spooky -> hypen
        # multi-hypens -> single hypen
        # leadning / trailing hypen -> removed
        $basename ~~ s:g/<-[A..Z a..z 0..9 . -]>+/-/;
        $basename ~~ s:g/'-' ** 2..*/-/;
        $basename ~~ s:g/ ^ '-' || '-' $//;

        $extension ~~ s:g/<-[A..Z a..z 0..9 . -]>+/-/;
        $extension ~~ s:g/'-' ** 2..*/-/;
        $extension ~~ s:g/ ^ '-' || '-' $//;

        $basename ~= '.' ~ $extension;

        if $file.basename eq $basename {
            %count<ok>++;
        }
        elsif $rename {
            %count<renamed>++;
            say mv-file( $file, $file.sibling( $basename ) ).Str;
        }
        else {
            %count<bad>++;
            say $file.Str;
       }
    }

    say %count;

}

#-------------------------------------------------------------------------------
